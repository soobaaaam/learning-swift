# Dictionary #3

## Comparing Dictionaries
```swift
let a = ["A": "Apple", "B": "Banana", "C": "City"]
let b = ["A": "Apple", "C": "City", "B": "Banana"]

a == b //true(순서는 신경쓰지 않으므로 동일한 key와 값이라면 같은 dictionary로 판단한다)

//대소문자를 무시하고 비교
a.elementsEqual(b) { (lhs, rhs) -> Bool in
    return lhs.key.caseInsensitiveCompare(rhs.key)
        == .orderedSame &&
        lhs.value.caseInsensitiveCompare(rhs.value)
        == .orderedSame
} //dictionary는 정렬되지 않았기 때문에 비교 대상이 코드를 실행할 때마다 랜덤하게 바뀌므로 결과값이 계속 바뀐다.

//key를 정렬한 뒤 비교하기 때문에 항상 같은 순서대로 비교한다. 그러므로 실행 결과가 바뀌지 않는다.
let aKeys = a.keys.sorted()
let bKeys = b.keys.sorted()

aKeys.elementsEqual(bKeys) { (lhs, rhs) -> Bool in
    guard lhs.caseInsensitiveCompare(rhs)
    ==.orderedSame else {
        return false
    }

    guard let lv = a[lhs], let rv = b[rhs],
    lv.caseInsensitiveCompare(rv) == .orderedSame
    else {
        return false
    }

    return true
}
```
## Finding Elements
```swift
words = ["A": "Apple", "B": "Banana", "C": "City"]

let c: ((String, String)) -> Bool = {
    $0.0 == "B" || $0.1.contains("i")
} //대문자 B나 소문자 i가 포함되어 있다면 true를 리턴한다

words.contains(where: c)

words.first(where: c) //true
```