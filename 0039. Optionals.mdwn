# Optionals

`let optionalNum: Int? = nil`<br/>
👉 optional type을 nil로 초기화 할 때는 반드시 type annotation으로 type을 지정해야한다<br/><br/>

`let str: String = "Swift"` 👉 Non-optional Type<br/>
`let optionalStr: String? = nil` 👉 Optional Type<br/><br/>

```swift
let a: Int? = nil

let b = a
b
```
👉 `nil`<br/><br/>

## Unwrapping

```swift
var num: Int? = nil
print(num)
```
👉 `nil`<br/><br/>

```swift
num = 123
print(num)
```
👉 `Optional(123)` (wrap으로 감싸져있다)<br/><br/>

```swift
let n = 123
print(n)
```
👉 `123`<br/><br/>

## Forced Unwrapping

*optionalExpression!*<br/><br/>

`print(num)`<br/>
👉 `Optional(123)`<br/><br/>

`print(num!)`<br/>
👉 `123`<br/><br/>

```swift
num = nil
print(num!)
```
👉 에러 발생 (값이 없는데 강제로 추출했기 때문에 에러가 발생한다)<br/><br/>

```swift
if num != nil {
    print(num!)
} //꺼낼 값이 있는 경우에만 강제 추출한다
```

**실제 프로그램에서는 강제 추출을 사용하지 않는 것이 좋다(crash가 발생하기 때문)**<br/><br/>

1. optional에 저장되어 있는 값을 사용하려면 값을 unwrapping 해야한다
2. nil이 저장되어 있는 상태에서 강제 추출하면 crash가 발생한다
3. optional 표현식을 unwrapping하면 non-optional type으로 결과가 return된다