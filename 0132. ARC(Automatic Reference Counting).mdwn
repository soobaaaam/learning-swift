# ARC(Automatic Reference Counting)

1. 스택과 달리 힙에 저장되는 데이터는 필요하지 않은 시점에 직접 제거해야한다.
2. ARC는 클래스 인스턴스의 메모리를 관리한다.
3. 인스턴스는 하나 이상의 소유자가 있는 경우 메모리에서 유지된다. 소유자가 없다면 메모리에서 제거된다.
4. 참조 카운트(Reference Count) : 제거 시점을 파악하기 위해서 소유자 수를 저장하는 것
5. 인스턴스는 참조 카운터가 1 이상이면 메모리에 유지되고, 참조 카운터가 0이 되면 메모리에서 제거된다.
6. 클래스 인스턴스를 변수에 저장하면 변수가 소유자(Owner)가 된다(이 시점의 인스턴스의 참조 카운터는 1)
7. 또다른 변수가 동일한 인스턴스를 소유하면 참조 카운터는 2가 된다.
8. 인스턴스를 소유하려면 특별한 메시지를 전달해야한다 -> 인스턴스가 제공하는 retain 메서드를 제공하는 것
9. 인스턴스가 더이상 필요하지 않다면 소유권을 포기해야한다 -> 특별한 메시지 : release 메서드

## Strong Reference(강한 참조)

1. 기본적으로 인스턴스와 소유자는 강한 참조로 연결된다.
2. 대상을 소유할 때마다 참조 카운터가 1씩 증가하고, 소유권을 포기할 때마다 1씩 감소한다.
3. 인스턴스는 소유자가 존재하는 동안에는 메모리에서 제거되지 않는다.
```swift
//Example
class Person {
    var name = "John Doe"

    deinit {
        print("person deinit")
    }
}

var person1: Person?
var person2: Person?
var person3: Person?

person1 = Person() //Person1 변수와 인스턴스과 강한 참조로 연결되고, 인스턴스의 참조 카운터는 1 증가한다
person2 = person1 //역시 강한 참조로 연결되고 인스턴스의 참조 카운터가 증가한다
person3 = person1 //위와 마찬가지

person1 = nil //소유권을 포기하는 것 = 참조 카운터가 1 감소한다
person2 = nil //위와 마찬가지

person3 = nil //참조 카운터가 0이 되므로 인스턴스가 메모리에서 제거된다. 비로소 person deinit가 출력된다
```

