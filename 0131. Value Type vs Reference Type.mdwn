# Value Type vs Reference Type

## Value Type(값 형식)
1. Structure, Enumeration, Tuple
2. ==, !=
```swift
//Example
struct SizeValue {
    var width = 0.0
    var height = 0.0
}

var value = SizeValue() //스택에 저장

var value2 = value //값이 복사돼서 새로운 메모리에 저장된다(value와는 개별)

value2.width = 1.0
value2.height = 2.0 //value2와 연결된 메모리가 새로운 값으로 업데이트된다(value와는 아무 연관이 없다)
```

## Reference Type(참조 형식)
1. Class, Closure
2. 힙에 인스턴스를 저장하고, 스택에 메모리 주소를 저장한다
3. 값을 전달할 때마다 인스턴스 복사본이 생성되지않고, 대신 스택에 저장되어있는 주소가 복사된다
4. 참조 : 스택에 저장되어 있는 메모리 주소
5. 동일한 인스턴스에 접근하는 메모리 주소가 복사되기 때문에 주소를 수백번 복사하더라도 접근대상이 달라지지 않는다
-> 어떤 변수를 통해 속성을 바꾸더라도 항상 동일한 인스턴스의 속성을 바꾸게 된다
6. ==, !=, ===, !==
```swift
//Example
class SizeObject {
    var width = 0.0
    var height = 0.0
}

var object = SizeObject() //스택과 힙에 새로운 공간이 생성된다(힙에는 인스턴스 저장, 스택에는 힙 메모리 주소 저장, 항상 인스턴스에 접근하려면 스택을 거쳐야한다)

var object2 = object //스택에 새로운 메모리 공간이 생성되고, 여기에 바로 전 스택에 저장했던 주소가 그대로 복사된다

object2.width = 1.0
object2.height = 2.0 //object를 통해 변경한 것과 동일하다(두 변수가 최종적으로 동일한 인스턴스에 접근하기 때문)
```
***
```swift
//let 비교
let v = SizeValue() //상수가 가르키는 스택을 값을 바꾸지 못하는 공간으로 만든다
v.width = 1.0 //오류(값을 바꿀 수 없으므로)

let o = SizeObject()
o.width = 1.0
o.height = 2.0 //인스턴스가 저장되어있는 힙은 제한이 없다(속성을 마음대로 바꿀 수 있다)
```