# Operator Methods><br/><br/>
```swift
static func operator(parameters) -> ReturnType {
    statements
}
```
**연산자 method를 구현할 때 주의점**
1. 연산자 method는 연산자가 가지고 있는 우선순위와 결합규칙을 바꾸지 않는다
2. 가능한 원래 기능과 동일하거나 유사한 형태로 구현해야한다<br/><br/>

```swift
struct Point {
    var x = 0.0
    var y = 0.0
}

extension Point: Equatable {
    static func ==(lhs: Point, rhs: Point) -> Bool {
        return (lhs.x == rhs.x) && (lhs.y == rhs.y)
    }
}

let p1 = Point(x :12, y: 34)
let p2 = Point(x: 67, y: 89)

p1 == p2
```
👉<br/>
`false`<br/><br/>

```swift
extension Point {
    static prefix func -(pt: Point) -> Point {
        return Point(x: -pt, y: -pt.y)
    }
}

let p3 = -p1
p3.x
p3.y
```
👉<br/>
`-12`<br/>
`-34`<br/><br/>

```swift
extension Point {
    static postfix func ++)pt: inout Point) -> Point {
        let ret = pt
        pt.x += 1
        pt.y += 1
        return ret
    }
}

var p4 = Point(x: 1.0, y: 2.0)
let p5 = p4++
p5.x
p5.y
p4.x
p4.y
```
👉<br/>
`1`<br/>
`2`<br/>
`2`<br/>
`3`<br/>