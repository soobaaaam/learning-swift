# Stored Property (저장 속성)

1. 형식 내부에 변수와 인스턴스를 선언하면 속성이 된다. (저장 속성)
2. 클래스와 구조체에서 선언할 수 있다.
3. 저장 속성은 인스턴스에 속한 속성이다.
4. 그래서 인스턴스가 생성될 때마다 새로운 메모리 공간이 생겨난다.
5. 속성에 저장되는 값은 인스턴스마다 달라진다.

## Syntax

**Variable Stored Property(변수 저장 속성)**<br/>
```swift
var name: Type = DefaultValue
```
1. 저장된 값을 언제든지 바꿀 수 있다.

**Constant Stroed Property(상수 저장 속성)**<br/>
```swift
let name: Type = DefaultValue 
```
1. 인스턴스 초기화가 완료된 후에는 값을 변경할 수 없다.
2. 상수 저장 속성의 값은 대부분 선언 시점에 선언한다.
3. 다른 요소에 의존적인 값이라면 생성자에서 저장한다.
4. 생성자 저장이 완료되면 인스턴스 초기화가 완료되고 이후에는 저장된 값을 바꿀 수 없다.

## Example
```swift
claa Person {
    let name: String = "John Doe"
    var age: Int = 33
}
```
## Explicit Member Expression(명시적 멤버 표현식) = Dot Syntax(점 문법)
```swift
let p = Person()
p.name
p.age

p.age = 30 //속성에 저장된 값을 변경
p.name = "New Name"
```
## Lazy Stored Properties(지연 저장 속성)

1. 초기화를 지연시킨다.
2. 인스턴스가 초기화된 이후에 개별적으로 초기화된다.
3. 그래서 항상 변수 저장 속성으로 선언한다. (lazy var)
4. 생성자에서 초기화하지 않기 때문에 선언 시점에 기본값을 저장해야한다.
```swift
struct Image {
    init() {
        print("new image")
    }
}

struct BlogPost {
    let title: String = "Title"
    let content: String = "Content"
    let attachment: Image = Image()
}

let post = BlogPost() //new image
```
👉 매번 인스턴스를 생성할 때마다 파일이나 네트워크에서 이미지를 가져온 다음 메모리 공간에 복사해야하므로 오버헤드가 발생한다. 그러므로 불필요한 메모리가 발생한다.
```swift
//lazy stored property
struct BlogPost {
    let title: String = "Title"
    let content: String = "Content"
    lazy var attachment: Image = Image()
}

var post = BlogPost() 
post.attachment //new image
```