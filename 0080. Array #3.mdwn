# Array #3

## Comparing Arrays
```swift
let a = ["A", "B", "C"]
let b = ["a", "b", "c"]

a == b //false
a != b //true

a.elementEqual(b) /false

a.elementEqual(b) { (lhs, rhs) -> Bool in
    return lhs.caseInsensitiveCompare(rhs) == .orderedSame
} //대소문자를 무시하고 비교
```
## Finding Elements
```swift
let nums = [1, 2, 3, 1, 4, 5, 2, 6, 7, 5, 0]

nums.contains(1) //true
nums.contains(8) //false

//짝수가 있는지 확인
nums.contains { (n) -> Bool in
    return n % 2 == 0
} //true

//가장 먼저 검색되는 짝수 확인
nums.first { (n) -> Bool in
    return n % 2 == 0
} //2

nums.firstIndex { (n) -> Bool in
    return n % 2 == 0
} //1(두번째 인덱스)

//가장 먼저 검색되는 1의 인덱스
nums.firstIndex(of: 1) //0

//가장 나중에 검색되는 1의 인덱스
nums.lastIndex(of: 1) //3
```
## Sorting on Array

sort : 배열을 직접 정렬<br/>
sorted : 정렬된 새로운 배열을 리턴<br/><br/>
```swift
//오름차순
nums.sorted() //[0,1,1,2,2,3,4,5,5,6,7]

//내림차순
nums.sorted( (a, b) -> Bool in
    return a > b
}

//reversed 메소드는 생성하지 않고, 배열의 메모리를 공유하면서 역순으로 열거할 수 있는 형식을 리턴한다
nums.sorted().reversed() //ReversedCollection<Array<Int>>

[Int](nums.sorted().reversed()) //[7,6,5,5,4,3,2,2,1,1,0]

//가변 배열
var mutableNums = nums

mutableNums.sort() //새로운 배열은 리턴하지 않는다
mutableNums.reverse() //역순(새로운 배열은 리턴하지 않는다)

//특정 위치의 요소를 교체
mutableNums.swapAt(0, 1) //0과1 인덱스의 위치가 서로 교체된다

//요소의 위치를 랜덤으로 배치
mutableNums.shuffle()
```