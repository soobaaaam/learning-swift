# String Options #2

### Numeric Option
: 문자열에 포함된 숫자를 숫자 자체로 비교한다<br/<br/>

```swift
let file9 = "file9.txt"
let file10 = "file10.txt"

file9 < file10

file9.compare(file10) == .orderedAscending //false

file9.compare(file10, options: [.numeric]) == .orderedAscending //true
```

### Diacritic Insensitive
: 발음기호 비교<br/><br/>

```swift
let a = "Cafe"
let b = "Cafè"

a == b //false(Swift에서는 문자열을 비교할 때 우리 눈으로 보는 실제 모양을 비교한다)
a.compare(b) == .orderedSame // false

a.compare(b, options: [.diacriticInsensitive]) == .orderedSame //true
```

### Width Insensitive Option
: 전각 문자, 반각 문자 비교<br/><br/>

```swift
let a = "\u{30A1}" //히라가나 전각문자
let b = "\u{ff67}" //히라가나 반각문자

a == b //false
a.compare(b) == .orderedSame //false

a.compare(b, options: [.widthInsensitive]) == .orderedSame //true
```

### Forced Ordering Option
: 강제 정렬<br/><br/>

```swift
let upper = "STRING"
let lower = "string"

upper == lower //false

upper.compare(lower, options: [.caseInsensitive]) == .orderedSame //true
upper.compare(lower, options: [.caseInsensitive, .forcedOrdering]) == .orderedSame //false(caseInsensitive 옵션을 무시한다)
```

### Regular Expression
: 정규식 옵션<br/><br/>

```swift
let emailPattern = "([0-9A-zA-Z_-]+)@([0-9a-zA-Z_-]+)(\\.[0-9a-zA-A_-]+){1,2}"
let emailAddress = "user@example.com"

if let _ = emailAddress.range(of: emailPattern) {
    print("found")
} else {
    print("not found")
} 
```
👉 `not found`<br/>
```swift
if let _ = emailAddress.range(of: emailPattern, options: [.regularExpression]) {
    print("found")
} else {
    print("not found")
}
```
👉 `found`<br/><br/>

**email 주소를 형식과 다르게 입력해도 found가 출력된다. range of 는 해당 패턴이 존재할 때 범위를 리턴해주기 때문에 range of 만으로는 올바른 email 주소를 받을 수 없다. 따라서 range of 메소드가 리턴한 범위가 입력된 문자열의 전체 범위와 같은지 다시 확인해야한다.**<br/>
```swift
if let range = emailAddress.range(of: emailPattern, options: [.regularExpression]), (range.lowerBound, range.upperBound) == (emailAddress.startIndex, emailAddress.endIndex) {
    print("found")
} else {
    print("not found")
}
```