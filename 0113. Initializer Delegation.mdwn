# Initializer Delegation

1. 초기화 코드에서 중복을 최대한 제거하고, 모든 속성을 효율적으로 초기화하기 위해서 사용한다
2. 값 형식과 참조 형식에서 서로 다른 규칙으로 구현된다

## Value Type(값 형식: 상속이 불가능하고, 생성자 종류가 하나이기 때문에 단순하다)
```swift
struct Size {
    var width: Double
    var height: Double

    init(w: Double, h: Double) {
        width = w
        height = h
    }

    init(value: Double) {
        self.init(w: value, h: value) //자신의 역할을 첫번째 생성자에게 위임한다
    }
}
```
## Class

1. designated initializer는 반드시 슈퍼클래스의 designated initializer를 호출해야한다(Delegate Up)
2. convenience initializer는 동일한 클래스에 있는 다른 initializer를 호출해야한다(Delegate Across)
3. convenience initializer를 호출했을 때 최종적으로 동일한 클래스에 있는 designated initializer가 호출되어야 한다
```swift
class Figure {
    let name: String

    init(name: String) {
        self.name = name
    }

    convenience init() {
        self.init(name: "unknown")
    }
}

class Rectangle: Figure {
    var width = 0.0
    var height = 0.0

//Delegate Up
    init(n: String, w: Double, h: Double) {
        width = w
        height = h
        super.init(name: n)
    }

    convenience init(value: Double) {
        self.init(n: "rect", w: value, h: value)
    }
}

    class Square: Rectangle {
    convenience init(value: Double) {
        self.init(n: "square", w: value, h: value)
    }

    convenience init() {
        self.init(value: 0.0)
    }
}
```