# Iterating Collections
: Collection을 열거하는 방법 👉 Collection에 저장된 모든 요소를 대상으로 반복적인 작업을 실행하는 것<br/>

## for-in
```swift
//기본 형태
for element in collection {
    statements
}
```
```swift
//배열
print("Array")
let arr = [1, 2, 3]
for num in arr {
    print(num)
}
```
👉<br/>
1<br/>
2<br/>
3<br/>
```swift
//Set
print("Set")
let set: Set = [1, 2, 3]
for num in set {
    print(num)
}
```
👉<br/>
`출력 결과는 실행할 때마다 달라진다(정렬되지 않았으므로)`<br/>
```swift
//Dictionary
print("Dictionary")
let dict = ["A": 1, "B": 2, "C": 3]
for (key, value) in dict {
    print(key, value)
}
```
👉<br/>
`출력 결과는 실행할 때마다 달라진다(정렬되지 않았으므로)`<br/>

## forEach
1. 함수형 패러다임으로 코드를 작성할 때 주로 사용된다.
2. 반복적으로 실행하는 코드를 클로져 파라미터로 받는다.
3. 이 클로져는 하나의 파라미터를 가지며 값을 리턴하지 않는다.
4. collection에 저장된 요소가 클로져의 파라미터로 전달된다.

**결과값은 for-in 과 같다**<br/>
```swift
//배열
print("Array")
let arr = [1, 2, 3]
arr.forEach { (num) in
    print(num)
}

//Set
print("Set")
let set: Set = [1, 2, 3]
set.forEach { (num) in
    print(num)
}

//Dictionary
print("Dictionary")
let dict = ["A": 1, "B": 2, "C": 3]
dict.forEach { (elem) in
    print(elem.key, elem.value)
}
```
```swift
func withForIn() {
    print(#function)
    let arr = [1, 2, 3]
    for num in arr {
        print(num)
        return
    }
}
```
👉 <br/>
1. break나 continue문을 사용할 수 있다.
2. 반복문이 포함되어 있는 코드 블록이 바로 종료된다.
```swift
func withForEach() {
    print(#function)
    let arr = [1, 2, 3]
    arr.forEach { (num) in
    print(num)
    return
    }
}
```
👉 <br/>
1. break나 continue문은 사용할 수 없다.
2. 리턴문이 외부와 반복 횟수에 영향을 주지 않는다. 지금 실행하고 있는 클로져 코드를 중지할 뿐이다.
