# Faliable Initializer

1. 이전의 생성자들은 모두 실패를 허용하지 않기 때문에, 초기화에 실패하면 컴파일 에러가 발생한다.
2. faliable 생성자는 실패를 허용하므로, 초기화에 실패하더라도 에러가 발생하지 않는다.
3. 대신 nil을 리턴한다.
```swift
//Syntax
init?(parameters) {
    initialization //초기화에 성공하면 초기화된 인스턴스가 옵셔널 형식으로 리턴된다. 실패하면 nil을 리턴한다.
}

init!(parameters) {
    initialization //초기화에 성공하면 초기화된 인스턴스가 논옵셔널 형식으로 리턴된다. 실패하면 crash가 발생한다.
}

struct Postion {
    let x: Double
    let y: Double

    init?(x: Double, y: Double) {
        guard x >= 0.0, y >= 0.0 else { return nil }

        self.x = x
        self.y = y
    }

    init!(value: Double) {
        guard value >= 0.0 else { return nil } 

        self.x = value
        self.y = value

        self.init(x: value, y: value) //이런 방식도 문제 없음
    }
}

var a = Position(x: 12, y: 34)

a = Position(x: -12, y: 0) //nil

var b: Position = Position(value: 12)

b = Position(value: -12) //error
```