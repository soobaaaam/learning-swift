# Set #2

## Comparing Sets
```swift
var a: Set = [1, 2, 3, 4, 5, 6, 7, 8, 9]
var b: Set = [1, 3, 5, 7, 9]
var c: Set = [2, 4, 6, 8, 10]
var d: Set = [1, 7, 5, 9, 3]

a == b //false
b == d //true(b와d의 순서는 다르지만 set은 정렬되지 않은 collection이므로 요소의 동일성만 판단한다)

b.elementsEqual(d) //실행할 때마다 결과값이 달라진다

//부분집합 여부
a.isSubset(of: a) //true
a.isStrictSubset(of: a) //false

//상위집합 여부
a.isSuperset(of: a)
a.isStrictSuperset(of: a)

//교집합 여부
a.isDisjoint(with: b) //false
a.isDisjoint(with: c) //false
b.isDisjoint(with: c) //true
```
## Combining Sets
```swift
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
b = [1, 3, 5, 7, 9]
c = [2, 4, 6, 8, 10]

var result = b.union(c) //b와 c의 합집합이 새로운 set으로 리턴된다

//원본을 직접 변경
b.formUnion(c) //b가 b와 c의 합집합으로 변경된다

//교집합 구하기
result = a.intersection(b) //두 집합의 교집합을 새로운 set으로 만든다

result = c.intersection(b) //b와 c에는 같은 값이 없기 때문에 빈 set이 리턴된다

a.formIntersection(b) //a와 b의 교집합만 남는다

result = a.symmetricDifference(b) //두 집합의 여집합을 새로운 set으로 리턴

result = a.subtracting(b) //두 집합의 차집합을 새로운 set으로 리턴
a.subtract(b) //원본을 직접 변경(form을 사용하지 않는다)
```